// Generated by RCL CLI Demo
// This file contains the compiled output from your RCL agent definition

/**
 * Messages dictionary - Maps message IDs to normalized AgentMessage objects
 * Each message follows the schema defined in @schemas/agent-message.schema.json
 */
export const messages = {
  "Planning": {
    "contentMessage": {
      "text": "What kind of trip are you planning?"
    },
    "messageTrafficType": "TRANSACTION"
  }
};

/**
 * Flow configurations - XState machine definitions for each flow
 * Each flow can be used to create XState machines for conversation logic
 */
export const flows = {
  "MainFlow": {
    "id": "MainFlow",
    "initial": "start",
    "states": {
      "start": {
        "on": {}
      },
      "end": {
        "type": "final"
      },
      ":start": {
        "on": {
          "NEXT": "Welcome"
        }
      },
      "Welcome": {
        "on": {
          "NEXT": "Planning"
        }
      },
      "Planning": {
        "on": {
          "NEXT": "Packages"
        }
      },
      "Destinations": {
        "on": {
          "NEXT": "Planning"
        }
      },
      "Booking": {
        "on": {
          "NEXT": "Payment"
        }
      },
      "Packages": {
        "on": {
          "NEXT": "Details"
        }
      },
      "Payment": {
        "on": {
          "NEXT": "Confirmation"
        }
      },
      "Confirmation": {
        "on": {
          "NEXT": ":end"
        }
      },
      "Details": {
        "on": {
          "NEXT": "Booking"
        }
      },
      ":end": {
        "on": {}
      }
    }
  },
  "SupportFlow": {
    "id": "SupportFlow",
    "initial": "start",
    "states": {
      "start": {
        "on": {}
      },
      "end": {
        "type": "final"
      },
      ":start": {
        "on": {
          "NEXT": "SupportWelcome"
        }
      },
      "SupportWelcome": {
        "on": {
          "NEXT": "FAQ"
        }
      },
      "FAQ": {
        "on": {
          "NEXT": "AgentTransfer when $js> !faq_resolved"
        }
      },
      "AgentTransfer when $js> !faq_resolved": {
        "on": {}
      },
      "AgentTransfer": {
        "on": {
          "NEXT": ":end"
        }
      },
      ":end": {
        "on": {}
      }
    }
  }
};

/**
 * Agent configuration - Contains agent properties, config, and defaults
 * Includes display name, branding, contact info, and default settings
 */
export const agent = {
  "name": "TravelAssistant"
};

/**
 * Utility functions for working with the compiled agent
 */

/**
 * Get a message by ID
 * @param {string} messageId - The message ID
 * @returns {object|null} - The normalized message object or null if not found
 */
export function getMessage(messageId) {
  return messages[messageId] || null;
}

/**
 * Get a flow configuration by ID
 * @param {string} flowId - The flow ID
 * @returns {object|null} - The XState configuration or null if not found
 */
export function getFlow(flowId) {
  return flows[flowId] || null;
}

/**
 * Create XState machine from flow configuration
 * @param {string} flowId - The flow ID
 * @param {object} options - Additional XState machine options
 * @returns {object|null} - XState machine configuration
 */
export function createMachine(flowId, options = {}) {
  const flowConfig = getFlow(flowId);
  if (!flowConfig) {
    return null;
  }

  return {
    ...flowConfig,
    ...options
  };
}

// Default export containing all exports
export default {
  messages,
  flows,
  agent,
  getMessage,
  getFlow,
  createMachine
};
