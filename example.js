// Generated by RCL CLI Demo
// This file contains the compiled output from your RCL agent definition

/**
 * Messages dictionary - Maps message IDs to normalized AgentMessage objects
 * Each message follows the schema defined in @schemas/agent-message.schema.json
 */
export const messages = {
  "greeting": {
    "contentMessage": {
      "text": "Hello! Welcome to our service. How can I help you today?"
    },
    "messageTrafficType": "TRANSACTION"
  },
  "question": {
    "contentMessage": {
      "text": "What would you like to know about our products?"
    },
    "messageTrafficType": "TRANSACTION"
  },
  "goodbye": {
    "contentMessage": {
      "text": "Thank you for contacting us. Have a great day!"
    },
    "messageTrafficType": "TRANSACTION"
  }
};

/**
 * Flow configurations - XState machine definitions for each flow
 * Each flow can be used to create XState machines for conversation logic
 */
export const flows = {
  "WelcomeFlow": {
    "id": "WelcomeFlow",
    "initial": "start",
    "states": {
      "start": {
        "on": {
          "NEXT": "greeting"
        }
      },
      "end": {
        "type": "final"
      },
      "greeting": {
        "on": {
          "NEXT": "question"
        }
      },
      "question": {
        "on": {
          "NEXT": "end"
        }
      }
    }
  }
};

/**
 * Agent configuration - Contains agent properties, config, and defaults
 * Includes display name, branding, contact info, and default settings
 */
export const agent = {
  "name": "WelcomeBot",
  "displayName": "Welcome Assistant",
  "brandName": "ACME Corp"
};

/**
 * Utility functions for working with the compiled agent
 */

/**
 * Get a message by ID
 * @param {string} messageId - The message ID
 * @returns {object|null} - The normalized message object or null if not found
 */
export function getMessage(messageId) {
  return messages[messageId] || null;
}

/**
 * Get a flow configuration by ID
 * @param {string} flowId - The flow ID
 * @returns {object|null} - The XState configuration or null if not found
 */
export function getFlow(flowId) {
  return flows[flowId] || null;
}

/**
 * Create XState machine from flow configuration
 * @param {string} flowId - The flow ID
 * @param {object} options - Additional XState machine options
 * @returns {object|null} - XState machine configuration
 */
export function createMachine(flowId, options = {}) {
  const flowConfig = getFlow(flowId);
  if (!flowConfig) {
    return null;
  }

  return {
    ...flowConfig,
    ...options
  };
}

// Default export containing all exports
export default {
  messages,
  flows,
  agent,
  getMessage,
  getFlow,
  createMachine
};
